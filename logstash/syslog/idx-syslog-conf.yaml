apiVersion: v1
kind: ConfigMap
metadata:
  name: idx-syslog
data:
  syslog.conf: |
    input {
      rabbitmq {
        queue => "logstash-queue-rqsyslog"
        host => "rabbitmq-logging"
        durable => true
        connect_retry_interval => 5
        connection_timeout => 5000
        ack => false
        key => "rqsyslog-key"
        exchange => "logstash-rqsyslog"
        port => 5672
        user => "logstashfakeuser"
        password => "somefakepass"
        tags  => [ "rqsyslog-input" ]
      }
    }

    filter {
      if "syslog" in [tags] or "syslogudp" in [tags] or "rqsyslog-input" in [tags]  {
        if "last message repeated" in [message] {
          drop {}
        }
        mutate {
          add_field => {
            "idxserver" => "${HOSTNAME:unknown.local}"
            "received_at" =>  "%{@timestamp}"
          }
        }
        grok {
          match => [
            "message","<%{POSINT:syslog_pri}>%{POSINT:syslog_facility_code} %{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}",
            "message","<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:? %{GREEDYDATA:syslog_message}",
            "message", "<%{POSINT:syslogpri}>(?<syslogtimestamp>%{MONTH} %{MONTHDAY} %{YEAR} %{TIME}): %{DATA:syslog_program}: %{GREEDYDATA:syslog_message}",
            "message","<%{POSINT:syslog_pri}>(?:%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}",
            # ASA Logs with different time format, not ISO8601
            # <164>Mar 15 2021 21:20:25 E0E-5580FWC01-A1112 : %ASA-4-106023: Deny udp src TRUNK:10.99.112.33/54423 dst Corp-Transit:10.208.53.156/161 by access-group "acl_DMZ-Corp-Transit_out" [0x20760c20, 0x0]
            "message", "<%{POSINT:syslog_pri}>%{DATA:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} : %{DATA:syslog_program}: %{GREEDYDATA:syslog_message}$"
          ]
          tag_on_failure => ["_grokparsefailure_init"]
        }
        syslog_pri { }

        ################################ TAGS ################################

        ### SRX TAG ###
        if [syslog_hostname] == "10.98.10.33" or [syslog_hostname] == "E0E-1500FWC01-B1139" or [syslog_hostname] == "E0E-1500FWC02-B1239" {
          mutate {
            add_tag => "SRX"
          }
        }

        ### PaloAlto TAG ###
        else if [syslog_hostname] =~ /[A-Za-z]{1}[0-9]{1}-PA[0-9]{3,4}([0-9]{2})?.*/ or [syslog_hostname] =~ /[A-Za-z]{3}-[A-Za-z]{3}-PA[0-9]{3,4}([0-9]{2})?.*/  or [syslog_hostname] in ["E0-5050PA01.us.saas", "E0-5050PA02.us.saas", "E0-5220PA01.us.saas", "E0-5220PA02.us.saas" ] or [syslog_hostname] =~ /prd-gcp-.*/ or [syslog_hostname] =~ /pna1apdfw[0-9]{1}.*/ {
          mutate {
            add_tag => "PaloAlto"
          }
        }

        ### ASA TAG ###
        if [syslog_program] =~ "%ASA-\d+-\d+" {
          mutate {
            add_tag => [ "ASA" ]
          }
          translate {
            dictionary => [ "10.98.10.116", "E0E-5580FWC01-A1112", "10.98.10.117", "E0E-5580FWC02-A1212" ]
            field => "syslog_hostname"
            destination =>"deviceid"
          }
          translate {
            dictionary => [ "10.98.10.116", "INTERNAL", "10.98.10.117", "INTERNAL" ]
            field => "syslog_hostname"
            destination =>"devicelocation"
          }
        }

        #### PulseSecure TAG ###
        if [syslog_hostname] =~ '[0-9]+(?:\.[0-9]+){3}' and "PulseSecure" in [message] {
          mutate {
            add_tag => "PulseSecure"
          }
        }

        ################################ PARSERS ################################

        ###### SRX Firewall ######
        if "SRX" in [tags] {
          grok {
            match => [
              "syslog_message", "%{TIMESTAMP_ISO8601:srx_timestamp} %{DATA:hostname} %{DATA:event} - %{DATA:msgtype} [%{DATA:os_version} %{GREEDYDATA:field_pairs}]",
              "syslog_message", "%{DATA:event} - %{DATA:msgtype} \[%{DATA:sysoid} %{GREEDYDATA:field_pairs}\]"
            ]
          }
          kv { }
        }

        ###### PALOALTO FIREWALL ######
        if "PaloAlto" in [tags] {
          mutate {
            remove_field => ["syslog_timestamp", "syslog_hostname" , "syslog_message", "syslog_pri", "syslog_program"]
          }
          grok {
            match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:syslog_message}" }
          }
          if "TRAFFIC" in [syslog_message] {
            csv {
              separator => ","
              source => "syslog_message"
              skip_empty_columns => true
              columns => ["PaloAltoDomain","ReceiveTime","SerialNum","Type","Threat-ContentType","ConfigVersion","GenerateTime","SourceAddress","DestinationAddress","NATSourceIP","NATDestinationIP","Rule","SourceUser","DestinationUser","Application","VirtualSystem","SourceZone","DestinationZone","InboundInterface","OutboundInterface","LogAction","TimeLogged","SessionID","RepeatCount","SourcePort","DestinationPort","NATSourcePort","NATDestinationPort","Flags","IPProtocol","Action","Bytes","BytesSent","BytesReceived","Packets","StartTime","ElapsedTimeInSec","Category","Padding","seqno","actionflags","SourceCountry","DestinationCountry","cpadding","pkts_sent","pkts_received","Session_end_reason","dg_hier_level_1","dg_hier_level_2","dg_hier_level_3","dg_hier_level_4","Virtual_System_Name","Device_Name","Action_Source","Source_VM_UUID","Destination_VM_UUID","Tunnel_ID","Monitor_Tag","Parent_Session_ID","Parent_Start_Time","Tunnel_Type", "SCTP_Association_ID", "SCTP_Chunks", "SCTP_Chunks_sent", "SCTP_Chunks_Received" ]
            }
          }
          else if "THREAT" in [syslog_message] {
            csv {
              separator => ","
              source => "syslog_message"
              skip_empty_columns => true
              columns => ["PaloAltoDomain","ReceiveTime","SerialNum","Type","Threat-ContentType","ConfigVersion","GenerateTime","SourceAddress","DestinationAddress","NATSourceIP","NATDestinationIP","Rule","SourceUser","DestinationUser","Application","VirtualSystem","SourceZone","DestinationZone","InboundInterface","OutboundInterface","LogAction","TimeLogged","SessionID","RepeatCount","SourcePort","DestinationPort","NATSourcePort","NATDestinationPort","Flags","IPProtocol","Action","URL","Threat-ContentName","Category","Severity","Direction","seqno","actionflags","SourceCountry","DestinationCountry","cpadding","contenttype","pcap_id","filedigest","cloud","url_idx","user_agent","filetype","xff","referer","sender","subject","recipient","reportid","dg_hier_level_1","dg_hier_level_2","dg_hier_level_3","dg_hier_level_4","Virtual_System_Name","Device_Name","Source_VM_UUID","Destination_VM_UUID","cpadding2", "HTTP_Method","Tunnel_ID","Monitor_Tag","Parent_Session_ID","Parent_Start_Time","cpadding3","Tunnel_Type","Threat_Category","Content_Version","SCTP_Association_ID","Payload_Protocol_ID","HTTP_Headers"]
            }
          } else {
            csv {
              separator => ","
              source => "syslog_message"
              skip_empty_columns => true
              columns => ["PaloAltoDomain","ReceiveTime","SerialNum","Type","Threat-ContentType","ConfigVersion","GenerateTime","VirtualSystem","EventID","Object","cpadding","cpadding2","Module","Severity","Description","seqno","actionflags","dg_hier_level_1","dg_hier_level_2","dg_hier_level_3","dg_hier_level_4","Virtual_System_Name","Device_Name"]
            }
          }
        }

        ###### CISCO ASA FIREWALL ######
        if "ASA" in [tags] {
          grok {
            match => [
              "syslog_message", "%{CISCOFW106001}",
              "syslog_message", "%{CISCOFW106006_106007_106010}",
              "syslog_message", "%{CISCOFW106014}",
              "syslog_message", "%{CISCOFW106015}",
              "syslog_message", "%{CISCOFW106021}",
              "syslog_message", "%{CISCOFW106023}",
              "syslog_message", "%{CISCOFW106100}",
              "syslog_message", "%{CISCOFW110002}",
              "syslog_message", "%{CISCOFW302010}",
              "syslog_message", "%{CISCOFW302013_302014_302015_302016}",
              "syslog_message", "%{CISCOFW302020_302021}",
              "syslog_message", "%{CISCOFW305011}",
              "syslog_message", "%{CISCOFW313001_313004_313008}",
              "syslog_message", "%{CISCOFW313005}",
              "syslog_message", "%{CISCOFW402117}",
              "syslog_message", "%{CISCOFW402119}",
              "syslog_message", "%{CISCOFW419001}",
              "syslog_message", "%{CISCOFW419002}",
              "syslog_message", "%{CISCOFW500004}",
              "syslog_message", "%{CISCOFW602303_602304}",
              "syslog_message", "%{CISCOFW710001_710002_710003_710005_710006}",
              "syslog_message", "%{CISCOFW713172}",
              "syslog_message", "%{CISCOFW733100}",
              "syslog_message", "User from %{IP:src_ip}/%{INT:src_port} to %{IP:dst_ip}/%{INT:dst_port} on interface %{GREEDYDATA:interface} using %{WORD:protocol} %{GREEDYDATA:reason} before using this service",
              "syslog_message", "%{DATA:reason} %{WORD:protocol} %{GREEDYDATA:reasondsc} from %{IP:src_ip} to %{IP:dst_ip} on interface %{GREEDYDATA:interface}",
              "syslog_message", "%{GREEDYDATA:reason} translation creation failed for %{WORD:orig_protocol} src %{DATA:src_interface}:%{IP:src_ip}(/%{INT:src_port})? dst %{DATA:dst_interface}:%{IP:dst_ip}(/%{INT:dst_port})?",
              "syslog_message", "%{GREEDYDATA:reason} DNS all records request from %{IP:src_ip} to %{IP:dst_ip} on interface %{GREEDYDATA:interface}",
              "syslog_message", "%{CISCO_ACTION:action} IP due to %{GREEDYDATA:reason} from %{IP:src_ip} to %{IP:dst_ip}",
              "syslog_message", "%{DATA:action} packet: %{IP:src_ip} \=\=\> %{IP:dst_ip} on interface %{GREEDYDATA:interface}",
              "syslog_message", "%{GREEDYDATA:reason} for user %{DATA:username} from %{IP:src_ip}(/%{INT:src_port}) to %{IP:dst_ip}(/%{INT:dst_port})"
            ]
            tag_on_failure => ["_ciscoparsefailure"]
          }
          mutate {
            convert => ["dst_port","integer"]
            convert => ["src_port","integer"]
          }
        }

        ###### PULSESECURE ######
        if "PulseSecure" in [tags] {
          grok {
            match => {"syslog_message" => "%{DATA:timestamp} %{DATA:application}: %{DATA:syslog_timestamp2} - ive - \[%{IP:src_IP}\] %{DATA:action}\[\] - %{GREEDYDATA:PulseSecureMessage}"}
            tag_on_failure => "PulseSecure_syslog_parse_failure"
          }
          if "PulseSecure_syslog_parse_failure" not in [tags] {
            grok {
              match => [
                "PulseSecureMessage", "Active Directory authentication server \'%{DATA:domain}\': %{DATA:domain_message}. Administrator may need to rejoin to the domain.",
                "PulseSecureMessage", "Sending %{DATA:action_message} \[ %{DATA:target}=\'\"%{DATA:domain}\"\' \] %{DATA:protocol} trap to %{IP:dst_IP}:%{POSINT:port}",
                "PulseSecureMessage", "%{DATA:action_message} while client at source IP \'[0-9]+(?:\.[0-9]+){3}\' was trying to connect to \'%{IP:dst_IP}\'. Reason: \'%{DATA:action_reason}\'",
                "PulseSecureMessage", "Number of concurrent users %{DATA:user_status} to the device: %{INT:user_count}",
                "PulseSecureMessage", "Number of %{DATA:action_type}: %{INT:connection_count}",
                "PulseSecureMessage", "Long-lived orphan \(parent pid=%{INT:parent_PID}\) process '%{DATA:process}' with pid '%{INT:process_PID}' %{DATA:processStatus}",
                "PulseSecureMessage", "%{DATA:action_message} to archive %{DATA:target_address} %{DATA:action_status}; it took %{DATA:action_time} to create and archive the file of size %{DATA:target_size}",
                "PulseSecureMessage", "%{DATA:action} - %{DATE_US:date_accessed} - %{DATA:action_message} - %{GREEDYDATA:action_status}"
              ]
              tag_on_failure => "PulseSecureMessage_Parse_Fail"
            }
          }
        }

        ################################ FIELD DROPS ################################

        if "PaloAlto" in [tags] {
          mutate {
            remove_field => ["syslog_message"]
          }
        }
        else if "SRX" in [tags] {
          mutate {
            remove_field => ["field_pairs", "syslog_message"]
          }
        }
      }

      # Fix syslog_timestamp issue
      # We get values like 2019-09-19T20:16:12.895-04:00 and Sep 19 20:15:44  (Sep 19 20:15:44 is throwing invalid format)
      date {
          match => [ "syslog_timestamp",
                     "YYYY-MM-dd HH:mm:ss",
                     "MMM dd HH:mm:ss",
                     "MMM  d HH:mm:ss",
                     "MMM dd yyyy HH:mm:ss",
                     "MMM  d yyyy HH:mm:ss" ]
          target => "syslog_timestamp"
      } # End of date filter

    } # End of filter section

    output {
      if "syslog" in [tags] or "syslogudp" in [tags] or "rqsyslog-input" in [tags] {
        if "SRX" in [tags] {
          elasticsearch {
            hosts => ["http://172.28.11.180:80/elasticsearch"]
            user => "elastic"
            password => "I35T8JNCg589e61FjL2iFQ8m"
            index => "syslogsrx-%{+YYYY.MM.dd}"
            manage_template => true
            template_name => "syslogsrx-template"
            template_overwrite => false
          }
        }
        else if "PaloAlto" in [tags] {
          elasticsearch {
            hosts => ["http://172.28.11.180:80/elasticsearch"]
            user => "elastic"
            password => "I35T8JNCg589e61FjL2iFQ8m"
            index => "syslogpal-%{+YYYY.MM.dd}"
            manage_template => true
            template_name => "syslogpal-template"
            template_overwrite => false
          }
        }
        else if "ASA" in [tags] {
          elasticsearch {
            hosts => ["http://172.28.11.180:80/elasticsearch"]
            user => "elastic"
            password => "I35T8JNCg589e61FjL2iFQ8m"
            index => "syslogasa-%{+YYYY.MM.dd}"
            manage_template => true
            template_name => "syslogasa-template"
            template_overwrite => false
          }
        }
        else if "PulseSecure" in [tags] {
          elasticsearch {
            hosts => ["http://172.28.11.180:80/elasticsearch"]
            user => "elastic"
            password => "I35T8JNCg589e61FjL2iFQ8m"
            index => "syslogpulsec-%{+YYYY.MM.dd}"
            manage_template => true
            template_name => "logstash"
            template_overwrite => false
          }
        }
        else {
          elasticsearch {
            hosts => ["http://172.28.11.180:80/elasticsearch"]
            user => "elastic"
            password => "I35T8JNCg589e61FjL2iFQ8m"
            index => "syslog-%{+YYYY.MM.dd}"
            manage_template => true
            template_name => "syslog-template"
            template_overwrite => false
          }
        }
      }
    }

